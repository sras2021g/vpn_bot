import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import os
from database import Database
from payment_handler import create_payment
from vless_generator import generate_key, get_expiration_date
from referral_system import generate_referral_link, get_referral_info
from admin_panel import get_admin_menu, get_servers_menu, get_prices_menu

# ÔøΩÔøΩ–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
dp["bot"] = bot
db = Database("database.db")

# –ú–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
def get_main_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π VPN", callback_data="get_key"),
            InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å VPN", callback_data="buy_vpn")
        ],
        [
            InlineKeyboardButton(text="üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data="my_keys"),
            InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="referral")
        ],
        [
            InlineKeyboardButton(text="üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")
        ]
    ])
    return keyboard

# –ú–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —Ç–∞—Ä–∏—Ñ–æ–≤
def get_payment_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 300 —Ä—É–±", callback_data="buy_1_month"),
            InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ - 800 —Ä—É–±", callback_data="buy_3_months")
        ],
        [
            InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ - 1500 —Ä—É–±", callback_data="buy_6_months")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    return keyboard

# –ú–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
def get_instruction_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="Android", callback_data="instruction_android"),
            InlineKeyboardButton(text="iOS", callback_data="instruction_ios")
        ],
        [
            InlineKeyboardButton(text="MacOS", callback_data="instruction_macos"),
            InlineKeyboardButton(text="Windows", callback_data="instruction_windows")
        ],
        [
            InlineKeyboardButton(text="TV", callback_data="instruction_tv")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    if not db.user_exists(user_id):
        db.add_user(user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if args:
        try:
            referral_id = int(args[0])  # –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî —ç—Ç–æ referral_id
            if referral_id == user_id:
                await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è.")
                return

            db.add_referral(user_id, referral_id)

            # –í—ã–¥–∞—ë–º 1 –¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ VPN
            server_id = db.get_least_loaded_server()
            if server_id:
                key = generate_key()
                expires_at = get_expiration_date(days=1)
                db.add_key(user_id, key, expires_at, server_id)
                await message.answer(f"üéâ –í–∞–º –≤—ã–¥–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞ 1 –¥–µ–Ω—å:\n\n`{key}`\n\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {expires_at}", parse_mode="Markdown")

        except (IndexError, ValueError):
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID: {args}")

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π VPN"
@dp.callback_query(F.data == "get_key")
async def handle_get_key(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id

        if db.key_exists(user_id):
            await callback.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—ã–¥–∞—á–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.", show_alert=True)
            return

        server_id = db.get_least_loaded_server()
        if not server_id:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.", show_alert=True)
            return

        key = generate_key()
        expires_at = get_expiration_date(days=1)  # 1 –¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ VPN
        db.add_key(user_id, key, expires_at, server_id)
        await callback.message.answer(f"–í–∞—à –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á:\n\n`{key}`\n\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {expires_at}", parse_mode="Markdown")
        await callback.message.answer("–í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:", reply_markup=get_instruction_menu())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_get_key: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å VPN"
@dp.callback_query(F.data == "buy_vpn")
async def handle_buy_vpn(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=get_payment_menu())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
@dp.callback_query(F.data.startswith("buy_"))
async def handle_buy_tariff(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        tariff = callback.data

        if tariff == "buy_1_month":
            amount = 300
            description = "–û–ø–ª–∞—Ç–∞ VPN –Ω–∞ 1 –º–µ—Å—è—Ü"
            days = 30
        elif tariff == "buy_3_months":
            amount = 800
            description = "–û–ø–ª–∞—Ç–∞ VPN –Ω–∞ 3 –º–µ—Å—è—Ü–∞"
            days = 90
        elif tariff == "buy_6_months":
            amount = 1500
            description = "–û–ø–ª–∞—Ç–∞ VPN –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤"
            days = 180
        else:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ.", show_alert=True)
            return

        # –°–æ–∑–¥–∞—ë–º "–ø–ª–∞—Ç—ë–∂"
        payment = await create_payment(amount, description)
        payment_url = payment["confirmation"]["confirmation_url"]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "—Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É"
        await callback.message.answer(f"–û–ø–ª–∞—Ç–∏—Ç–µ {amount} —Ä—É–±. –ø–æ —Å—Å—ã–ª–∫–µ:\n\n{payment_url}")

        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–∞–∑—É –≤—ã–¥–∞—ë–º –∫–ª—é—á
        server_id = db.get_least_loaded_server()
        if not server_id:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.", show_alert=True)
            return

        key = generate_key()
        expires_at = get_expiration_date(days)
        db.add_key(user_id, key, expires_at, server_id)
        await callback.message.answer(f"–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –í–∞—à –∫–ª—é—á:\n\n`{key}`\n\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {expires_at}", parse_mode="Markdown")
        await callback.message.answer("–í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:", reply_markup=get_instruction_menu())

        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É (30% –æ—Ç —Å—É–º–º—ã)
        referral_id = db.get_referral_id(user_id)
        if referral_id:
            bonus = amount * 0.30  # 30% –æ—Ç —Å—É–º–º—ã
            db.add_earned(referral_id, bonus)
            await bot.send_message(referral_id, f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {bonus} —Ä—É–±. –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}!")

        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_buy_tariff: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –∫–ª—é—á–∏"
@dp.callback_query(F.data == "my_keys")
async def handle_my_keys(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        keys = db.get_user_keys(user_id)

        if not keys:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.", show_alert=True)
            return

        response = "–í–∞—à–∏ –∫–ª—é—á–∏:\n\n"
        for key, expires_at in keys:
            response += f"–ö–ª—é—á: `{key}`\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {expires_at}\n\n"

        await callback.message.answer(response, parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_my_keys: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"
@dp.callback_query(F.data == "referral")
async def handle_referral(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        bot_info = await callback.bot.get_me()
        referral_link = generate_referral_link(bot_info.username, user_id)
        referral_info = get_referral_info(db, user_id)

        response = (
            f"üëã –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n"
            f"{referral_link}\n\n"
            f"{referral_info}\n\n"
            f"üí° –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!"
        )
        await callback.message.answer(response, reply_markup=get_referral_menu())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_referral: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞"
@dp.callback_query(F.data == "withdraw_earned")
async def handle_withdraw_earned(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        earned = db.get_earned(user_id)

        if earned <= 0:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.", show_alert=True)
            return

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å
        db.add_balance(user_id, earned)
        db.add_earned(user_id, -earned)  # –û–±–Ω—É–ª—è–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞

        await callback.message.answer(f"üíµ {earned} —Ä—É–±. –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_withdraw_earned: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ú–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
def get_referral_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíµ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="withdraw_earned")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /admin
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é)
@dp.callback_query(F.data == "back_to_main")
async def handle_back_to_main(callback: types.CallbackQuery):
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.callback_query(F.data == "admin_stats")
async def handle_admin_stats(callback: types.CallbackQuery):
    try:
        total_users = len(db.get_all_users())
        total_keys = len(db.get_all_keys())
        stats = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\nüîë –ö–ª—é—á–µ–π: {total_keys}"
        await callback.message.answer(stats)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_stats: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

@dp.callback_query(F.data == "admin_give_key")
async def handle_admin_give_key(callback: types.CallbackQuery):
    try:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ (–≤ –¥–Ω—è—Ö):")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_give_key: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

@dp.callback_query(F.data == "admin_block_user")
async def handle_admin_block_user(callback: types.CallbackQuery):
    try:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_block_user: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

@dp.callback_query(F.data == "admin_manage_servers")
async def handle_admin_manage_servers(callback: types.CallbackQuery):
    try:
        await callback.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏:", reply_markup=get_servers_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_manage_servers: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

@dp.callback_query(F.data == "admin_broadcast")
async def handle_admin_broadcast(callback: types.CallbackQuery):
    try:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_broadcast: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

@dp.callback_query(F.data == "admin_edit_prices")
async def handle_admin_edit_prices(callback: types.CallbackQuery):
    try:
        await callback.message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω:", reply_markup=get_prices_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_edit_prices: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
@dp.message(F.text.startswith("add_server"))
async def handle_add_server(message: types.Message):
    try:
        parts = message.text.split()
        if len(parts) != 4:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: add_server IP –ü–æ—Ä—Ç –ü—Ä–æ—Ç–æ–∫–æ–ª")
            return

        _, ip, port, protocol = parts
        db.add_server(ip, int(port), protocol)
        await message.answer(f"–°–µ—Ä–≤–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {ip}:{port} ({protocol})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
@dp.message(F.text.startswith("remove_server"))
async def handle_remove_server(message: types.Message):
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: remove_server ID_—Å–µ—Ä–≤–µ—Ä–∞")
            return

        _, server_id = parts
        db.update_server_status(int(server_id), "inactive")
        await message.answer(f"–°–µ—Ä–≤–µ—Ä —Å ID {server_id} —É–¥–∞–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Å–µ—Ä–≤–µ—Ä–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω
@dp.message(F.text.startswith("edit_price"))
async def handle_edit_price(message: types.Message):
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: edit_price —Ç–∞—Ä–∏—Ñ –Ω–æ–≤–∞—è_—Ü–µ–Ω–∞")
            return

        _, tariff, new_price = parts
        db.update_price(tariff, float(new_price))
        await message.answer(f"–¶–µ–Ω–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ {tariff} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_price} —Ä—É–±.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
@dp.callback_query(F.data == "instruction")
async def handle_instruction(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É:", reply_markup=get_instruction_menu())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
@dp.callback_query(F.data == "instruction_android")
async def handle_instruction_android(callback: types.CallbackQuery):
    instruction = (
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android:\n"
        "1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞;\n"
        "2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üåêV2rayNG;\n"
        "3Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É V2rayNG –∏ –Ω–∞–∂–º–∏ ‚ûï –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É;\n"
        "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞¬ª;\n"
        "5Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫—Ä—É–≥–ª—É—é –∫–Ω–æ–ø–∫—É –≤–∫–ª—é—á–µ–Ω–∏—è –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é."
    )
    await callback.message.answer(instruction)
    await callback.answer()

@dp.callback_query(F.data == "instruction_ios")
async def handle_instruction_ios(callback: types.CallbackQuery):
    instruction = (
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è IOS:\n"
        "1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞;\n"
        "2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üåêStreisand;\n"
        "3Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É Streisand –∏ –Ω–∞–∂–º–∏—Ç–µ ‚ûï –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É;\n"
        "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞¬ª (–µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–ø—Ä–æ—Å–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç–∞–≤–∫—É - —Ä–∞–∑—Ä–µ—à–∏—Ç–µ);\n"
        "5Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫—Ä—É–≥–ª—É—é –∫–Ω–æ–ø–∫—É –≤–∫–ª—é—á–µ–Ω–∏—è –≤–Ω–∏–∑—É –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é.\n\n"
        "–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –í–ö–õ/–í–´–ö–õ VPN –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ Instagram (–≤—Å—ë —Ç–∞–∫–∂–µ, —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å Streisand –≤–º–µ—Å—Ç–æ WireGuard)."
    )
    await callback.message.answer(instruction)
    await callback.answer()

@dp.callback_query(F.data == "instruction_macos")
async def handle_instruction_macos(callback: types.CallbackQuery):
    instruction = (
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è MacOS:\n"
        "1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞;\n"
        "2Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üåêV2Box;\n"
        "3Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É V2Box –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É ¬´Configs¬ª (—Å–Ω–∏–∑—É);\n"
        "4Ô∏è‚É£ –î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ ‚ûï –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´Import v2ray uri from clipboard¬ª (–ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç –≤ —Å–ø–∏—Å–∫–µ);\n"
        "5Ô∏è‚É£ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É ¬´Home¬ª (—Å–Ω–∏–∑—É) –∏ –Ω–∞–∂–º–∏—Ç–µ –±–æ–ª—å—à—É—é –∫–Ω–æ–ø–∫—É (—Å–Ω–∏–∑—É) ¬´Tap to Connect¬ª;\n"
        "6Ô∏è‚É£ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é."
    )
    await callback.message.answer(instruction)
    await callback.answer()

@dp.callback_query(F.data == "instruction_windows")
async def handle_instruction_windows(callback: types.CallbackQuery):
    instruction = (
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Windows:\n"
        "1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞;\n"
        "2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–ª–∏–∑ –¥–ª—è —Å–≤–æ–µ–π –û–° —Å GitHub;\n"
        "3Ô∏è‚É£ –î–ª—è Windows —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–µ—Ä—Å–∏—é Portable –∏–ª–∏ Setup. –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞;\n"
        "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω: –¥–ª—è –†–§ - ‚Äú–†–æ—Å—Å–∏—è‚Äù, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - ‚Äú–î—Ä—É–≥–æ–π‚Äù;\n"
        "5Ô∏è‚É£ –ö–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äú–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å‚Äù, –∑–∞—Ç–µ–º ‚Äú–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞‚Äù;\n"
        "6Ô∏è‚É£ –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é!"
    )
    await callback.message.answer(instruction)
    await callback.answer()

@dp.callback_query(F.data == "instruction_tv")
async def handle_instruction_tv(callback: types.CallbackQuery):
    instruction = (
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è TV:\n"
        "1‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2RayTun –∏–∑ GooglePlay;\n"
        "2‚É£ –ù–∞ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–µ, –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ v2RayTun –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ –≤—ã–±–µ—Ä–∏—Ç–µ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ;\n"
        "3‚É£ –î–∞–ª–µ–µ –≤—ã–±–µ—Ä–∏—Ç–µ –†—É—á–Ω–æ–π –≤–≤–æ–¥ (–µ—Å–ª–∏ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Ä—É–∫–∞–º–∏ –≤–≤–æ–¥–∏—Ç—å)/–ª–∏–±–æ '–∏–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞' –µ—Å–ª–∏ –≤—ã –µ–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º/–ª–∏–±–æ '–ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞' (–µ—Å–ª–∏ –∫–æ–ø–∏—Ä—É–µ—Ç–µ –∏–∑ –±–ª–æ–∫–Ω–æ—Ç–∞)."
    )
    await callback.message.answer(instruction)
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π
async def check_expiring_keys():
    while True:
        keys = db.get_all_keys()
        for user_id, key, expires_at in keys:
            expires_date = datetime.strptime(expires_at, "%Y-%m-%d %H:%M:%S")
            if (expires_date - datetime.now()).days == 1:
                await bot.send_message(user_id, f"–í–∞—à –∫–ª—é—á –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å:\n\n`{key}`\n\n–ü—Ä–æ–¥–ª–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.", parse_mode="Markdown")
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 1 —á–∞—Å

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    asyncio.create_task(check_expiring_keys())  # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
